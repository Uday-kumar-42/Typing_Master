{"ast":null,"code":"var _jsxFileName = \"/home/rgukt/React/Vanilla_React/Coffee_Page/src/counter1.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport \"./home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Counter1() {\n  _s();\n  const [step, setStep] = useState(10);\n  const [count, setCount] = useState(0);\n  const date = new Date();\n  date.setDate(date.getDate() + count);\n  function decrementStep() {\n    if (step > 0) setStep(step => {\n      return step - 1;\n    });\n  }\n  function incrementStep() {\n    setStep(step => {\n      return step + 1;\n    });\n  }\n  function decrementCount() {\n    setCount(count => {\n      return count - step;\n    });\n  }\n  function incrementCount() {\n    setCount(count => {\n      return count + step;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Counter-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button primary-button\",\n      onClick: decrementStep,\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" step : \", step, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button primary-button\",\n      onClick: incrementStep,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button primary-button\",\n      onClick: decrementCount,\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" count : \", count, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button primary-button\",\n      onClick: incrementCount,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: count === 0 ? \"Today is \" : `${count > 0 ? count + \" days from now is \" : Math.abs(count) + \" days ago was \"} `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), date.toDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n/* alternate way for listing\n{coffeeMenu.map((coffee) => (\n  <Item coffeeObj={coffee} />\n))} */\n\n/* in the above code we have used (condition && <peice of jsx code>),\nthe jsx code will be a part of the UI only if the condition is satisfied.\nThis is because of the shortcircuiting property of the and(&&) operator\nSHORT-CIRCUITING : and(&) operator returns the second element if the first argument is truthy-value(EX:numbers,true,non-empty object or variable) */\n\n/* in the above code we can also a ternary operator,the advantage of using a ternary operator is it will provide \nan alternative to displayed whenever the condition fails */\n\n/* component wise conditional renderingcan be done using if{}-else{} whereas peice wise conditional rendering \nis done using ternary operator or and operator */\n\n/* Rendering Each element by passing props as arguments for each item,but it will be difficult when we deal with large data\n<Item coffeeName=\"Espresso\" ingredients=\"Espresso shot\" />\nItem coffeeName=\"Latte\" ingredients=\"Espresso, Steamed Milk\" />\n<Item\n  coffeeName=\"Cappuccino\"\n  ingredients=\"Espresso, Steamed Milk, Milk Foam\"\n/>\n<Item coffeeName=\"Macchiato\" ingredients=\"Espresso, Milk Foam\" />\n<Item\n  coffeeName=\"Mocha\"\n  ingredients=\"Espresso, Chocolate Syrup, Steamed Milk, Whipped Cream\"\n/>\n<Item\n  coffeeName=\"Irish Coffee\"\n  ingredients=\"Espresso, Whiskey, Sugar, Whipped Cream\"\n/> */\n\n/* if (props.soldOut) {\n  return null; soldOut is set to true for expresso,which means it will not be rendered on to UI \n} */\n_s(Counter1, \"Vn/ytadyEgVpeVs30wHnXGOW2BY=\");\n_c = Counter1;\nvar _c;\n$RefreshReg$(_c, \"Counter1\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Counter1","_s","step","setStep","count","setCount","date","Date","setDate","getDate","decrementStep","incrementStep","decrementCount","incrementCount","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","Math","abs","toDateString","_c","$RefreshReg$"],"sources":["/home/rgukt/React/Vanilla_React/Coffee_Page/src/counter1.js"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport \"./home.css\";\n\nexport default function Counter1() {\n  const [step, setStep] = useState(10);\n  const [count, setCount] = useState(0);\n  const date = new Date();\n  date.setDate(date.getDate() + count);\n\n  function decrementStep() {\n    if (step > 0)\n      setStep((step) => {\n        return step - 1;\n      });\n  }\n\n  function incrementStep() {\n    setStep((step) => {\n      return step + 1;\n    });\n  }\n\n  function decrementCount() {\n    setCount((count) => {\n      return count - step;\n    });\n  }\n\n  function incrementCount() {\n    setCount((count) => {\n      return count + step;\n    });\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n              <h3>Counter-2</h3>\n      <button className=\"button primary-button\" onClick={decrementStep}>\n        --\n      </button>\n      <span> step : {step} </span>\n      <button className=\"button primary-button\" onClick={incrementStep}>\n        +\n      </button>\n      <br></br> <br></br>\n      <button className=\"button primary-button\" onClick={decrementCount}>\n        --\n      </button>\n      <span> count : {count} </span>\n      <button className=\"button primary-button\" onClick={incrementCount}>\n        +\n      </button>\n      <p>\n        <span>\n          {count === 0\n            ? \"Today is \"\n            : `${\n                count > 0\n                  ? count + \" days from now is \"\n                  : Math.abs(count) + \" days ago was \"\n              } `}\n        </span>\n        {date.toDateString()}\n      </p>\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* alternate way for listing\n{coffeeMenu.map((coffee) => (\n  <Item coffeeObj={coffee} />\n))} */\n\n/* in the above code we have used (condition && <peice of jsx code>),\nthe jsx code will be a part of the UI only if the condition is satisfied.\nThis is because of the shortcircuiting property of the and(&&) operator\nSHORT-CIRCUITING : and(&) operator returns the second element if the first argument is truthy-value(EX:numbers,true,non-empty object or variable) */\n\n/* in the above code we can also a ternary operator,the advantage of using a ternary operator is it will provide \nan alternative to displayed whenever the condition fails */\n\n/* component wise conditional renderingcan be done using if{}-else{} whereas peice wise conditional rendering \nis done using ternary operator or and operator */\n\n/* Rendering Each element by passing props as arguments for each item,but it will be difficult when we deal with large data\n<Item coffeeName=\"Espresso\" ingredients=\"Espresso shot\" />\nItem coffeeName=\"Latte\" ingredients=\"Espresso, Steamed Milk\" />\n<Item\n  coffeeName=\"Cappuccino\"\n  ingredients=\"Espresso, Steamed Milk, Milk Foam\"\n/>\n<Item coffeeName=\"Macchiato\" ingredients=\"Espresso, Milk Foam\" />\n<Item\n  coffeeName=\"Mocha\"\n  ingredients=\"Espresso, Chocolate Syrup, Steamed Milk, Whipped Cream\"\n/>\n<Item\n  coffeeName=\"Irish Coffee\"\n  ingredients=\"Espresso, Whiskey, Sugar, Whipped Cream\"\n/> */\n\n/* if (props.soldOut) {\n  return null; soldOut is set to true for expresso,which means it will not be rendered on to UI \n} */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}